version: '3'

services:
  db:
    image: postgres
    ports:
      - "5433:5432"
    networks:
      - streams
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=edilcloud-back
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
  web:
    build: .
    command: daphne -b 0.0.0.0 -p 8000 web.asgi:application --settings=web.settings.production
    volumes:
      - .:/edilcloud-back
    ports:
      - "8000:8000"
    networks:
      - streams
    restart: always
    depends_on:
      - db
    environment:
      - DJANGO_SUPERUSER_PASSWORD=Oneplus3t
      - ENV_NAME=test
      - SOCKET_HOST=35.178.108.7
      - SOCKET_PORT=6969
      - SOCKET_URL=https://ws.edilcloud.io

  redis:
    image: redis
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redis-data:/data
    environment:
      - REDIS_REPLICATION_MODE=master
    restart: always
    networks:
      - streams

  nginx:
    restart: always
    image: staticfloat/nginx-certbot
    build:
      context: .
      dockerfile: ./config/nginx/Dockerfile
      args:
        - CERTBOT_EMAIL=monkeybits.srl@gmail.com
        - DOMAIN_LIST=edilcloud.io,*.edilcloud.io
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    environment:
        CERTBOT_EMAIL: monkeybits.srl@gmail.com
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./config/nginx/conf.d:/etc/nginx/conf.d
      - /etc/letsencrypt/:/etc/letsencrypt/
    depends_on:
      - web
      - db
    networks:
      - streams

#  certbot:
#    image: certbot/certbot
#    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  celery:
    build: .
    command: celery -A web worker -B
    environment:
      - ENV_NAME=test
    networks:
      - streams
    deploy:
      replicas: 2
    restart: always
    volumes:
      - .:/edilcloud-back
    links:
      - db
      - redis

volumes:
  postgres_data:
  redis-data:
networks:
  streams: